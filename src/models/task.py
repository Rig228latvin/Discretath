from typing import List


class Task:
    def __init__(self, name: str, condition:str):
        self.condition = condition
        self.name = name

tasks: List[Task] = [
    Task("Задача 1", "1. На вход — число n, на выход — булева функция от n аргументов."),
    Task("Задача 2", "2. На вход — вектор функции, 0 или 1, номер аргумента, на выход — соответствующая остаточная"),
    Task("Задача 3", "3. На вход — два вектора (это нулевая и единичная остаточные функции по некоторому аргументу), номер аргумента, на выход — вектор функции"),
    Task("Задача 4", "4. Игра. Узнать имя функции от 2-х аргументов. Система предлагает вектор функции, пользователь выбирает «имя» (одно из 16)."),
    Task("Задача 5", "5. Игра. Существенные и фиктивные переменные. Система предлагает вектор функции. Пользователь выбирает существенные и фиктивные переменные."),
    Task("Задача 6", "6. Игра. ДНФ. Система предлагает вектор функции. Пользователь вводит ДНФ. Система определяет правильно или нет введена ДНФ."),
    Task("Задача 7", "7. Игра. КНФ. Система предлагает вектор функции. Пользователь вводит КНФ. Система определяет правильно или нет введена КНФ."),
    Task("Задача 8", "8. Пользователь вводит вектор функции. Система строит СДНФ."),
    Task("Задача 9", "9. Пользователь вводит вектор функции. Система строит СКНФ."),
    Task("Задача 10", "10. Игра. Предполные классы б.ф. Система предлагает вектор функции. Пользователь должен выбрать предполные классы, которым эта функция принадлежит. Система определяет правильно выбраны классы или нет."),
    Task("Задача 11", "11. Игра. Полные системы б.ф. Система предлагает набор векторов функций. Пользователь определяет полным или нет является набор функций. Если система б.ф. неполна, то пользователь должен указать замкнутый класс, которому набор функций принадлежит."),
    Task("Задача 12", "12. Реализация одного из алгоритмов построения ДНФ.")
]
